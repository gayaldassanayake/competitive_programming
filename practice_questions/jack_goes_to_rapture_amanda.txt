#!/bin/python3

import math
import os
import random
import re
import sys
import heapq
#
# Complete the 'getCost' function below.
#
# The function accepts WEIGHTED_INTEGER_GRAPH g as parameter.
#

#
# For the weighted graph, <name>:
#
# 1. The number of nodes is <name>_nodes.
# 2. The number of edges is <name>_edges.
# 3. An edge exists between <name>_from[i] and <name>_to[i]. The weight of the edge is <name>_weight[i].
#
#

def getCost(g_nodes, g_from, g_to, g_weight):
    graph = dict()
    unvisited = []
    for i in range(1, g_nodes+1):
        graph[i] = dict()
        graph[i]["neighbours"] = dict()
        graph[i]["visited"] = 0
        if i == 1:
            graph[i]["cost"] = 0
            unvisited.append((0, 1))
        else:
            graph[i]["cost"] = sys.maxsize
            unvisited.append((sys.maxsize, i))
    for i in range(len(g_from)):
        graph[g_from[i]]["neighbours"][g_to[i]] = g_weight[i]
        graph[g_to[i]]["neighbours"][g_from[i]] = g_weight[i]

    heapq.heapify(unvisited)

    while len(unvisited):
        to_visit = heapq.heappop(unvisited)
        cost = to_visit[0]
        node = to_visit[1]

        while graph[node]["cost"] != cost:
            if len(unvisited) == 0:
                print(-1)
                quit()
            to_visit = heapq.heappop(unvisited)
            cost = to_visit[0]
            node = to_visit[1]

        if node == g_nodes:
            print(graph[node]["cost"])
            quit()

        graph[node]["visited"] = 1
        neighbours = graph[node]["neighbours"]
        for i in neighbours:
            new_cost = max(cost, neighbours[i])
            if graph[i]["visited"] == 0:
                graph[i]["cost"] = min(graph[i]["cost"], new_cost)
                heapq.heappush(unvisited, (graph[i]["cost"], i))
    print(-1)

    # Print your answer within the function and return nothing

if __name__ == '__main__':
    g_nodes, g_edges = map(int, input().rstrip().split())

    g_from = [0] * g_edges
    g_to = [0] * g_edges
    g_weight = [0] * g_edges

    for i in range(g_edges):
        g_from[i], g_to[i], g_weight[i] = map(int, input().rstrip().split())

    getCost(g_nodes, g_from, g_to, g_weight)
